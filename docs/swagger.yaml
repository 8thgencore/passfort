basePath: /v1
definitions:
  domain.SecretTypeEnum:
    enum:
    - password
    - text
    - file
    type: string
    x-enum-varnames:
    - Password
    - Text
    - File
  domain.UserRoleEnum:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - AdminRole
    - UserRole
  handler.activateMasterPasswordRequest:
    properties:
      password:
        example: masterpassword
        minLength: 8
        type: string
    required:
    - password
    type: object
  handler.changeMasterPasswordRequest:
    properties:
      current_password:
        example: currentmasterpassword
        minLength: 8
        type: string
      new_password:
        example: newmasterpassword
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  handler.changePasswordRequest:
    properties:
      new_password:
        example: newpassword
        minLength: 8
        type: string
      old_password:
        example: oldpassword
        minLength: 8
        type: string
    required:
    - new_password
    - old_password
    type: object
  handler.confirmRegistrationRequest:
    properties:
      email:
        example: test@example.com
        type: string
      otp:
        example: "123456"
        type: string
    required:
    - email
    - otp
    type: object
  handler.createCollectionRequest:
    properties:
      description:
        example: A collection of items
        type: string
      name:
        example: My Collection
        type: string
    required:
    - name
    type: object
  handler.createMasterPasswordRequest:
    properties:
      password:
        example: masterpassword
        minLength: 8
        type: string
    required:
    - password
    type: object
  handler.createSecretRequest:
    properties:
      secret_type:
        allOf:
        - $ref: '#/definitions/domain.SecretTypeEnum'
        example: password
    required:
    - secret_type
    type: object
  handler.forgotPasswordRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  handler.loginRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  handler.newRegistrationCodeRequest:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  handler.registerRequest:
    properties:
      email:
        example: test@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  handler.resetPasswordRequest:
    properties:
      email:
        example: test@example.com
        type: string
      new_password:
        example: new_password
        minLength: 8
        type: string
      otp:
        example: "123456"
        type: string
    required:
    - email
    - new_password
    - otp
    type: object
  handler.updateCollectionRequest:
    properties:
      description:
        example: Collection description
        type: string
      name:
        example: My Collection
        type: string
    required:
    - name
    type: object
  handler.updateSecretRequest:
    properties:
      description:
        example: This is a secret
        type: string
      name:
        example: My Secret
        type: string
    required:
    - description
    - name
    type: object
  handler.updateUserRequest:
    properties:
      email:
        example: test@example.com
        type: string
      name:
        example: John Doe
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.UserRoleEnum'
        example: admin
    required:
    - email
    - name
    - role
    type: object
  response.AuthResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzUxMi.eyJhbGciOiJIUzUxMi.eyJhbGciOiJIUzUxMi
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzUxMi.eyJhbGciOiJIUzUxMi.eyJhbGciOiJIUzUxMi
        type: string
    type: object
  response.CollectionResponse:
    properties:
      created_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      created_by:
        example: bb073c91-f09b-4858-b2d1-d14116e73b8d
        type: string
      description:
        example: Collection description
        type: string
      id:
        example: bb073c91-f09b-4858-b2d1-d14116e73b8d
        type: string
      name:
        example: My Collection
        type: string
      updated_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      updated_by:
        example: bb073c91-f09b-4858-b2d1-d14116e73b8d
        type: string
    type: object
  response.ErrorResponse:
    properties:
      messages:
        example:
        - Error message 1
        - ' Error message 2'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
    type: object
  response.Meta:
    properties:
      limit:
        example: 10
        type: integer
      skip:
        example: 0
        type: integer
      total:
        example: 100
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      message:
        example: Success
        type: string
      success:
        example: true
        type: boolean
    type: object
  response.SecretResponse:
    properties:
      collection_id:
        example: fab8dfe9-7cd0-4cd7-a387-7d6835a910d3
        type: string
      created_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      created_by:
        example: f10ff052-b316-47f0-9788-ae8ebfa91b86
        type: string
      id:
        example: bb073c91-f09b-4858-b2d1-d14116e73b8d
        type: string
      secret_type:
        allOf:
        - $ref: '#/definitions/domain.SecretTypeEnum'
        example: password
      updated_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      updated_by:
        example: f10ff052-b316-47f0-9788-ae8ebfa91b86
        type: string
    type: object
  response.UserResponse:
    properties:
      created_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      email:
        example: test@example.com
        type: string
      id:
        example: bb073c91-f09b-4858-b2d1-d14116e73b8d
        type: string
      name:
        example: John Doe
        type: string
      updated_at:
        example: "1970-01-01T00:00:00Z"
        type: string
    type: object
host: api.example.com
info:
  contact:
    email: test@gmail.com
    name: Tom Jerry
    url: https://github.com/8thgencore/passfort
  description: This is a simple RESTful Password Manager Service API written in Go
    using Gin web framework, PostgreSQL database, and Redis cache.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: PassFort API
  version: "1.0"
paths:
  /auth/change-password:
    put:
      consumes:
      - application/json
      description: Change the authenticated user's password by providing the old and
        new passwords
      parameters:
      - description: Change password request
        in: body
        name: changePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/handler.changePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Passwords do not match
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change own password
      tags:
      - Authentication
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiate the process of resetting a forgotten password by providing
        the user's email
      parameters:
      - description: Request reset forgot password request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.forgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset request initiated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Request to reset forgotten password
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a registered user and returns an access token if the credentials
        are valid.
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully logged in
          schema:
            $ref: '#/definitions/response.AuthResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login and get an access token
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by invalidating the access token
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            type: string
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Logout a user
      tags:
      - Authentication
  /auth/refresh-token:
    get:
      consumes:
      - application/json
      description: Refreshes an access token by providing the refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Succesfully refreshed
          schema:
            $ref: '#/definitions/response.AuthResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh an access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: create a new user account with default role "user"
      parameters:
      - description: Register request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/handler.registerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/register/confirm:
    post:
      consumes:
      - application/json
      description: Confirm user registration by providing the email and OTP code
      parameters:
      - description: Confirm registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.confirmRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully confirmed registration
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Confirm user registration with OTP code
      tags:
      - Authentication
  /auth/register/request-new-code:
    post:
      consumes:
      - application/json
      description: Requests a new OTP code for confirming user registration. If the
        previous OTP code
      parameters:
      - description: Request new OTP request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.newRegistrationCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP code requested successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many requests, try again later
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Request a new OTP code for registration confirmation
      tags:
      - Authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets user's password after confirmation with OTP code.
      parameters:
      - description: Request reset password request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.resetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            type: string
        "400":
          description: Invalid email or password format
          schema:
            type: string
        "401":
          description: Invalid OTP code
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Reset user's password
      tags:
      - Authentication
  /collections:
    post:
      consumes:
      - application/json
      description: Create a new collection
      parameters:
      - description: Create Collection Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createCollectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Collection created
          schema:
            $ref: '#/definitions/response.CollectionResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new collection
      tags:
      - Collections
  /collections/{collection_id}:
    delete:
      consumes:
      - application/json
      description: Delete a collection by id
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Collection deleted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a collection
      tags:
      - Collections
    get:
      consumes:
      - application/json
      description: Get a collection by id
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Collection displayed
          schema:
            $ref: '#/definitions/response.CollectionResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a collection
      tags:
      - Collections
    put:
      consumes:
      - application/json
      description: Update a collection's name or description by id
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      - description: Update collection request
        in: body
        name: updateCollectionRequest
        required: true
        schema:
          $ref: '#/definitions/handler.updateCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Collection updated
          schema:
            $ref: '#/definitions/response.CollectionResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a collection
      tags:
      - Collections
  /collections/{collection_id}/secrets:
    get:
      consumes:
      - application/json
      description: List me secrets associated with pagination
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      - description: Skip
        in: query
        name: skip
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Secrets displayed
          schema:
            $ref: '#/definitions/response.Meta'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List me secrets
      tags:
      - Secrets
    post:
      consumes:
      - application/json
      description: Create a new secret
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      - description: Create Secret Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createSecretRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Secret created
          schema:
            $ref: '#/definitions/response.SecretResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new secret
      tags:
      - Secrets
  /collections/{collection_id}/secrets/{secret_id}:
    delete:
      consumes:
      - application/json
      description: Delete a secret by id
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      - description: Secret ID
        in: path
        name: secret_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Secret deleted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a secret
      tags:
      - Secrets
    get:
      consumes:
      - application/json
      description: Get a secret by id
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      - description: Secret ID
        in: path
        name: secret_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Secret displayed
          schema:
            $ref: '#/definitions/response.SecretResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a secret
      tags:
      - Secrets
    put:
      consumes:
      - application/json
      description: Update a secret by id
      parameters:
      - description: Collection ID
        in: path
        name: collection_id
        required: true
        type: string
      - description: Secret ID
        in: path
        name: secret_id
        required: true
        type: string
      - description: Update Secret Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.updateSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Secret updated
          schema:
            $ref: '#/definitions/response.SecretResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a secret
      tags:
      - Secrets
  /collections/me:
    get:
      consumes:
      - application/json
      description: List me collections associated with pagination
      parameters:
      - description: Skip
        in: query
        name: skip
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Collections displayed
          schema:
            $ref: '#/definitions/response.Meta'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List me collections
      tags:
      - Collections
  /master-password:
    post:
      consumes:
      - application/json
      description: Create a master password for the authenticated user
      parameters:
      - description: Create master password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.createMasterPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Master password created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Master password already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create master password
      tags:
      - MasterPassword
    put:
      consumes:
      - application/json
      description: Change the master password for the authenticated user
      parameters:
      - description: Change master password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.changeMasterPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Master password changed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change master password
      tags:
      - MasterPassword
  /master-password/activate:
    post:
      consumes:
      - application/json
      description: Activate the master password for the authenticated user
      parameters:
      - description: Activate master password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.activateMasterPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Master password is activated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid master password
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Activate master password
      tags:
      - MasterPassword
  /users:
    get:
      consumes:
      - application/json
      description: List users with pagination
      parameters:
      - description: Skip
        in: query
        name: skip
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users displayed
          schema:
            $ref: '#/definitions/response.Meta'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User displayed
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user's name, email, password, or role by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user request
        in: body
        name: updateUserRequest
        required: true
        schema:
          $ref: '#/definitions/handler.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get information about the authenticated user (who am I)
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get information about the authenticated user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
