// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/8thgencore/passfort/internal/repository/storage/postgres/dao"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SecretRepository is an autogenerated mock type for the SecretRepository type
type SecretRepository struct {
	mock.Mock
}

// CreatePasswordSecret provides a mock function with given fields: ctx, secret
func (_m *SecretRepository) CreatePasswordSecret(ctx context.Context, secret *dao.PasswordSecretDAO) (*dao.PasswordSecretDAO, error) {
	ret := _m.Called(ctx, secret)

	var r0 *dao.PasswordSecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, *dao.PasswordSecretDAO) *dao.PasswordSecretDAO); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.PasswordSecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.PasswordSecretDAO) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: ctx, collectionID, secret
func (_m *SecretRepository) CreateSecret(ctx context.Context, collectionID uuid.UUID, secret *dao.SecretDAO) (*dao.SecretDAO, error) {
	ret := _m.Called(ctx, collectionID, secret)

	var r0 *dao.SecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dao.SecretDAO) *dao.SecretDAO); ok {
		r0 = rf(ctx, collectionID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.SecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *dao.SecretDAO) error); ok {
		r1 = rf(ctx, collectionID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTextSecret provides a mock function with given fields: ctx, secret
func (_m *SecretRepository) CreateTextSecret(ctx context.Context, secret *dao.TextSecretDAO) (*dao.TextSecretDAO, error) {
	ret := _m.Called(ctx, secret)

	var r0 *dao.TextSecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, *dao.TextSecretDAO) *dao.TextSecretDAO); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.TextSecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.TextSecretDAO) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecret provides a mock function with given fields: ctx, id
func (_m *SecretRepository) DeleteSecret(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPasswordSecretByID provides a mock function with given fields: ctx, id
func (_m *SecretRepository) GetPasswordSecretByID(ctx context.Context, id uuid.UUID) (*dao.PasswordSecretDAO, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.PasswordSecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.PasswordSecretDAO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.PasswordSecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretByID provides a mock function with given fields: ctx, id
func (_m *SecretRepository) GetSecretByID(ctx context.Context, id uuid.UUID) (*dao.SecretDAO, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.SecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.SecretDAO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.SecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTextSecretByID provides a mock function with given fields: ctx, id
func (_m *SecretRepository) GetTextSecretByID(ctx context.Context, id uuid.UUID) (*dao.TextSecretDAO, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.TextSecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.TextSecretDAO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.TextSecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecretsByCollectionID provides a mock function with given fields: ctx, collectionID, skip, limit
func (_m *SecretRepository) ListSecretsByCollectionID(ctx context.Context, collectionID uuid.UUID, skip uint64, limit uint64) ([]dao.SecretDAO, error) {
	ret := _m.Called(ctx, collectionID, skip, limit)

	var r0 []dao.SecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64, uint64) []dao.SecretDAO); ok {
		r0 = rf(ctx, collectionID, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.SecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uint64, uint64) error); ok {
		r1 = rf(ctx, collectionID, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePasswordSecret provides a mock function with given fields: ctx, secret
func (_m *SecretRepository) UpdatePasswordSecret(ctx context.Context, secret *dao.PasswordSecretDAO) (*dao.PasswordSecretDAO, error) {
	ret := _m.Called(ctx, secret)

	var r0 *dao.PasswordSecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, *dao.PasswordSecretDAO) *dao.PasswordSecretDAO); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.PasswordSecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.PasswordSecretDAO) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecret provides a mock function with given fields: ctx, secret
func (_m *SecretRepository) UpdateSecret(ctx context.Context, secret *dao.SecretDAO) (*dao.SecretDAO, error) {
	ret := _m.Called(ctx, secret)

	var r0 *dao.SecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, *dao.SecretDAO) *dao.SecretDAO); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.SecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.SecretDAO) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTextSecret provides a mock function with given fields: ctx, secret
func (_m *SecretRepository) UpdateTextSecret(ctx context.Context, secret *dao.TextSecretDAO) (*dao.TextSecretDAO, error) {
	ret := _m.Called(ctx, secret)

	var r0 *dao.TextSecretDAO
	if rf, ok := ret.Get(0).(func(context.Context, *dao.TextSecretDAO) *dao.TextSecretDAO); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.TextSecretDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.TextSecretDAO) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSecretRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretRepository creates a new instance of SecretRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretRepository(t mockConstructorTestingTNewSecretRepository) *SecretRepository {
	mock := &SecretRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
