// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/8thgencore/passfort/internal/repository/storage/postgres/dao"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUser(ctx context.Context, user *dao.UserDAO) (*dao.UserDAO, error) {
	ret := _m.Called(ctx, user)

	var r0 *dao.UserDAO
	if rf, ok := ret.Get(0).(func(context.Context, *dao.UserDAO) *dao.UserDAO); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.UserDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.UserDAO) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserRepository) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserByEmail(ctx context.Context, email string) (*dao.UserDAO, error) {
	ret := _m.Called(ctx, email)

	var r0 *dao.UserDAO
	if rf, ok := ret.Get(0).(func(context.Context, string) *dao.UserDAO); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.UserDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserByID(ctx context.Context, id uuid.UUID) (*dao.UserDAO, error) {
	ret := _m.Called(ctx, id)

	var r0 *dao.UserDAO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.UserDAO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.UserDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, skip, limit
func (_m *UserRepository) ListUsers(ctx context.Context, skip uint64, limit uint64) ([]dao.UserDAO, error) {
	ret := _m.Called(ctx, skip, limit)

	var r0 []dao.UserDAO
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []dao.UserDAO); ok {
		r0 = rf(ctx, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.UserDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) UpdateUser(ctx context.Context, user *dao.UserDAO) (*dao.UserDAO, error) {
	ret := _m.Called(ctx, user)

	var r0 *dao.UserDAO
	if rf, ok := ret.Get(0).(func(context.Context, *dao.UserDAO) *dao.UserDAO); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.UserDAO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dao.UserDAO) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
