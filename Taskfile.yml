# https://taskfile.dev

version: "3"

vars:
  DBML_FILE: "./schema.dbml"
  DSN: "{{.DB_CONNECTION}}://{{.DB_USER}}:{{.DB_PASSWORD}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode=disable"

dotenv:
  - ".env"

tasks:
  default:
    desc: "Gettings started"
    cmds:
      - task: install

  install:
    desc: "Install dependencies"
    cmds:
      - go install github.com/go-task/task/v3/cmd/task@latest
      - go install github.com/cosmtrek/air@latest
      - go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - go install github.com/swaggo/swag/cmd/swag@latest

  service:up:
    desc: "Start services"
    cmd: docker compose up -d

  service:down:
    desc: "Stop services"
    cmd: docker compose down

  db:docs:
    desc: "Generate database documentation from DBML file"
    cmd: dbdocs build {{.DBML_FILE}}
    requires:
      vars:
        - DBML_FILE

  db:create:
    desc: "Create database if not exists"
    cmd: docker exec -it passfort_storage sh -c "psql -U {{.DB_USER}} -c 'SELECT 1' -d {{.DB_NAME}} &>/dev/null || psql -U {{.DB_USER}} -c 'CREATE DATABASE {{.DB_NAME}};'"
    requires:
      vars:
        - DB_USER
        - DB_NAME

  db:drop:
    desc: "Drop database"
    cmd: docker exec -it passfort_storage sh -c "psql -U {{.DB_USER}} -c 'DROP DATABASE {{.DB_NAME}};'"
    requires:
      vars:
        - DB_USER
        - DB_NAME

  db:cli:
    desc: "Connect to database using command line interface"
    cmd: docker exec -it passfort_storage sh -c "psql -U {{.DB_USER}} -d {{.DB_NAME}}"
    requires:
      vars:
        - DB_USER
        - DB_NAME

  migrate:up:
    desc: "Run database migrations"
    cmd: migrate -path ./internal/database/migrations -database {{.DSN}} -verbose up {{.CLI_ARGS}}
    requires:
      vars:
        - DSN

  migrate:down:
    desc: "Rollback database migrations"
    cmd: migrate -path ./internal/database/migrations -database {{.DSN}} -verbose down {{.CLI_ARGS}}
    requires:
      vars:
        - DSN

  cache:cli:
    desc: "Connect to redis using command line interface"
    cmd: docker exec -it passfort_cache redis-cli

  dev:
    desc: "Start development server"
    cmd: air

  lint:
    desc: "Run linter"
    cmd: golangci-lint run ./...

  build:
    desc: "Build binary"
    cmd: go build -o ./bin/{{.APP_NAME}} ./cmd/app/main.go
    requires:
      vars:
        - APP_NAME

  start:
    desc: "Start binary"
    cmd: ./bin/{{.APP_NAME}}
    requires:
      vars:
        - APP_NAME

  swag:
    desc: "Generate swagger documentation"
    cmds:
      - swag fmt
      - swag init -g ./internal/app/app.go  -o ./docs --parseInternal true

  # proto:
  #   desc: "Generate proto files"
  #   cmds:
  #     - cd internal/clients/mail/grpc
  #     - protoc -I proto proto/*.proto --go_out=./gen --go_opt=paths=source_relative --go-grpc_out=./gen --go-grpc_opt=paths=source_relative

  mock:
    desc: "Generate mocks files"
    cmds:
      - mockery --name=CacheRepository --dir=internal/service/adapters/cache --output=internal/service/adapters/cache/mocks --filename=mock_cache_repository.go
      - mockery --name=UserRepository --dir=internal/service/adapters/storage --output=internal/service/adapters/storage/mocks --filename=mock_user_repository.go
      - mockery --name=CollectionRepository --dir=internal/service/adapters/storage --output=internal/service/adapters/storage/mocks --filename=mock_collection_repository.go
      - mockery --name=SecretRepository --dir=internal/service/adapters/storage --output=internal/service/adapters/storage/mocks --filename=mock_secret_repository.go

  test:
    desc: "Run tests"
    cmds:
      - go test -v ./... -race -cover -timeout 30s -count 1 -coverprofile=coverage.out
      - go tool cover -html=coverage.out -o coverage.html
